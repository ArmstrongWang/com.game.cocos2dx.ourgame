package exercise.acm.array;

/**
 * Using binary chop to search a given value 
 * in a rotated sorted array(with duplicates or not), ascend in default.
 */

public class SearchInRotatedArray {

	public int binaryChopSearch(int[] rotatedArray, int target) {

		int targetIndex = 0;
		int rotatedIndex = 0;

		// Find rotated index
		for (int i = 0; i < rotatedArray.length - 1; i++) {
			if (rotatedArray[i] > rotatedArray[i + 1]) {
				rotatedIndex = i;
				break;
			}
		}
		System.out.println(rotatedIndex);

		// Find the index of a given value
		if (target > rotatedArray[0]) {
			for (int i = 0; i < rotatedIndex; i++) {
				if (rotatedArray[i] == target) {
					targetIndex = i;
					break;
				} else {
					targetIndex = -1;
				}

			}
		}

		if (target == rotatedArray[0]) {
			targetIndex = 0;
		}

		if (target < rotatedArray[0]) {
			for (int i = rotatedIndex + 1; i < rotatedArray.length; i++) {
				if (rotatedArray[i] == target) {
					targetIndex = i;
					break;
				} else {
					targetIndex = -1;
				}
			}

		}

		return targetIndex;

	}

	public int searchBinary(int[] rotatedArray, int start, int end, int target) {

		int mid = (start + end) / 2;
		int targetIndex = 0;

		if (rotatedArray[mid] == target) {
			target = rotatedArray[mid];
			targetIndex = mid;
			return targetIndex;
		}

		if (rotatedArray[mid] < rotatedArray[end]) {
			// 2nd half in sequence
			if (target > rotatedArray[mid] && target <= rotatedArray[end]) {
				return searchBinary(rotatedArray, mid + 1, end, target);
			} else {
				return searchBinary(rotatedArray, start, mid - 1, target);
			}

		} else if (rotatedArray[mid] > rotatedArray[end]) {
			// 1st half in sequence
			if (target < rotatedArray[mid] && target >= rotatedArray[start]) {
				return searchBinary(rotatedArray, start, mid - 1, target);
			} else {
				return searchBinary(rotatedArray, mid + 1, end, target);
			}
		} else {
			for (int i = start; i < mid; i++) {
				if (target == rotatedArray[i]) {
					target = rotatedArray[i];
					targetIndex = i;
				}
			}
		}

		return targetIndex;

	}

	public static void main(String[] args) {
		SearchInRotatedArray search = new SearchInRotatedArray();

		// int forLoop = search.binaryChopSearch(
		// new int[]{7,7,7,8,8,8,9,9,1,2,3,4,5}, 9);
		// System.out.println(forLoop);

		int[] array = new int[] { 4, 4, 5, 5, 5, 6, 1, 2 };
		int binarySearch = search.searchBinary(array, 0, array.length - 1, 1);
		System.out.println("final:" + binarySearch);
	}

}
